use @std:io/{ log, write-stdout };

mut state: [bool] = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true];

let print-state() {
  for (mut i = 0; i < state.length; i = i + 1) {
    write-stdout(if state[i] { '#' } else { ' ' });
  }
  log('');
}

let next-state(state: bool, left: bool, right: bool): bool {
  if state {
    if left && right {
      false
    } else {
      true
    }
  } else {
    if right {
      true
    } else {
      false
    }
  }
}

let step() {
  print-state();
  let new-state: [bool] = state.shallow-copy();
  new-state[0] = next-state(state[0], false, state[1]);
  for (mut i = 1; i < state.length - 1; i = i + 1) {
    new-state[i] = next-state(state[i], state[i - 1], state[i + 1]);
  }
  new-state[new-state.length - 1] = next-state(
    state[state.length - 1],
    state[state.length - 2],
    false
  );

  state = new-state;
}

for (mut i = 0; i < 45; i = i + 1) {
  step();
}
