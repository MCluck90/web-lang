use std::str::FromStr;
use crate::phases::frontend::ast::*;
use crate::phases::shared::{BinOp, PrefixUnaryOp, Span, Type, VisibilityModifier};

grammar(module_path: &str);

pub Module: ModuleAST = {
  <imports:ImportStatement*> <items:ModuleItem*> => ModuleAST {
    path: module_path.to_string(),
    imports,
    items,
  }
};

ImportStatement: Import = {
  <start: @L> "use" "@" <scope:Identifier> ":" <package:Identifier> <path:Path> <selectors:ImportSelectors> ";" <end: @R> => Import {
    span: Span { start, end },
    kind: ImportKind::Package {
      scope,
      package,
      path,
      selectors,
    }
  }
};

Path: Vec<Identifier> = {
  "/" <(<Identifier> "/")*>
};

ImportSelectors: Vec<ImportSelector> = {
  "{" <CommaList<ImportSelector>> "}"
};

ImportSelector: ImportSelector = {
  Identifier => ImportSelector {
    span: <>.span,
    kind: ImportSelectorKind::Name(<>.name),
  }
};

ModuleItem: ModuleItem = {
  <start: @L> <type_:Environment> "{" <stmts:Statement*> "}" <end: @R> => ModuleItem {
    span: Span { start, end, },
    visibility: None,
    kind: ModuleItemKind::EnvironmentBlock(type_, stmts),
  },
  <start: @L> <is_public:"pub"?> <statement:Statement> <end: @R> => ModuleItem {
    span: Span { start, end, },
    visibility: is_public.map(|_| VisibilityModifier::Public),
    kind: ModuleItemKind::Statement(statement),
  },
};

// true if mutable
VariableBinding: bool = {
  "let" => false,
  "mut" => true,
}

Environment: EnvironmentType = {
  "back" => EnvironmentType::Backend,
  "front" => EnvironmentType::Frontend,
};

Parameters: Vec<Parameter> = "(" <CommaList<Parameter>> ")";

Parameter: Parameter = <start: @L> <identifier:Identifier> ":" <type_:Type> <end: @R> => Parameter {
  span: Span { start, end, },
  identifier,
  type_,
};

Type: Type = {
  "bool" => Type::Bool,
  "int" => Type::Int,
  "string" => Type::String,

  "[" <Type> "]" => Type::List(Box::new(<>)),
  "(" <parameters:CommaList<Type>> ")" "->" <return_type:Type> => Type::Function {
    parameters,
    return_type: Box::new(return_type),
  },
};

Statement: Statement = {
  #[precedence(level="0")]
  <start: @L> <fn_definition:FunctionDefinition> <end: @R> =>
    Statement {
      span: Span { start, end },
      kind: fn_definition,
    },
  <start: @L> <variable_declaration:VariableDeclaration> <end: @R> =>
    Statement {
      span: Span { start, end },
      kind: variable_declaration,
    },
  <start: @L> <for_loop:ForLoop> <end: @R> =>
    Statement {
      span: Span { start, end, },
      kind: for_loop,
    },
  <start: @L> <loop_:Loop> <end: @R> =>
    Statement {
      span: Span { start, end, },
      kind: loop_,
    },
  <start: @L> "return" <expr:Expression?> ";" <end: @R> =>
    Statement {
      span: Span { start, end, },
      kind: StatementKind::Return(expr),
    },
  <start: @L> "break" ";" <end: @R> =>
    Statement {
      span: Span { start, end, },
      kind: StatementKind::Break,
    },

  #[precedence(level="1")]
  <start: @L> <expr:Expression> ";" <end: @R> => Statement {
    span: Span { start, end },
    kind: StatementKind::Expression(expr),
  },
}

FunctionDefinition: StatementKind = {
  "fn" <name:Identifier> <parameters:Parameters> <return_type:(":" <Type>)?> <body:Block> =>
    StatementKind::FunctionDefinition {
      name,
      parameters,
      return_type: return_type.unwrap_or(Type::Void),
      body,
    },
};

VariableDeclaration: StatementKind = {
  <is_mutable:VariableBinding> <identifier:Identifier> <type_:(":" <Type>)?> "=" <initializer:Expression> ";" =>
    StatementKind::VariableDeclaration {
      is_mutable,
      type_,
      identifier,
      initializer,
    },
};

ForLoop: StatementKind = {
  "for" "(" <initializer:Statement> <condition:Expression?> ";" <post_loop:Expression?> ")" "{" <body:Statement*> "}" =>
    StatementKind::ForLoop {
      initializer: Some(Box::new(initializer)),
      condition: condition,
      post_loop: post_loop,
      body,
    },
  "for" "(" ";" <condition:Expression?> ";" <post_loop:Expression?> ")" "{" <body:Statement*> "}" =>
    StatementKind::ForLoop {
      initializer: None,
      condition: condition,
      post_loop: post_loop,
      body,
    },
};

Loop: StatementKind = {
  "loop" "{" <Statement*> "}" => StatementKind::Loop(<>),
};

Expression: Expression = {
  AssignmentExpression,
};

AssignmentExpression: Expression = {
  LogicalOrExpression,
  <start: @L> <left:AssignmentExpression> "=" <right:LogicalOrExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Assign, Box::new(right)),
    Span { start, end, },
  ),
};

LogicalOrExpression: Expression = {
  LogicalAndExpression,
  <start: @L> <left:LogicalOrExpression> "||" <right:LogicalAndExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Or, Box::new(right)),
    Span { start, end, },
  ),
};

LogicalAndExpression: Expression = {
  EqualityExpression,
  <start: @L> <left:LogicalAndExpression> "&&" <right:EqualityExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::And, Box::new(right)),
    Span { start, end, },
  ),
};

EqualityExpression: Expression = {
  RelationalExpression,
  <start: @L> <left:EqualityExpression> "==" <right:RelationalExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Eq, Box::new(right)),
    Span { start, end, },
  ),
  <start: @L> <left:EqualityExpression> "!=" <right:RelationalExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Ne, Box::new(right)),
    Span { start, end, },
  ),
};

RelationalExpression: Expression = {
  AdditiveExpression,
  <start: @L> <left:RelationalExpression> "<" <right:AdditiveExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Lt, Box::new(right)),
    Span { start, end, },
  ),
  <start: @L> <left:RelationalExpression> "<=" <right:AdditiveExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Le, Box::new(right)),
    Span { start, end, },
  ),
  <start: @L> <left:RelationalExpression> ">" <right:AdditiveExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Gt, Box::new(right)),
    Span { start, end, },
  ),
  <start: @L> <left:RelationalExpression> ">=" <right:AdditiveExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Ge, Box::new(right)),
    Span { start, end, },
  ),
};

AdditiveExpression: Expression = {
  FactorExpression,
  <start: @L> <left:AdditiveExpression> "+" <right:FactorExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Add, Box::new(right)),
    Span { start, end, },
  ),
  <start: @L> <left:AdditiveExpression> "-" <right:FactorExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Sub, Box::new(right)),
    Span { start, end, },
  ),
};

FactorExpression: Expression = {
  PrefixOperatorExpression,
  <start: @L> <left:FactorExpression> "*" <right:PrefixOperatorExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Mul, Box::new(right)),
    Span { start, end, },
  ),
  <start: @L> <left:FactorExpression> "/" <right:PrefixOperatorExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Div, Box::new(right)),
    Span { start, end, },
  ),
  <start: @L> <left:FactorExpression> "%" <right:PrefixOperatorExpression> <end: @R> => Expression::new(
    ExpressionKind::BinaryOp(Box::new(left), BinOp::Mod, Box::new(right)),
    Span { start, end, },
  ),
};

PrefixOperatorExpression: Expression = {
  AccessOrCallExpression,
  <start: @L> "--" <expr:AccessOrCallExpression> <end: @R> => Expression::new(
    ExpressionKind::PrefixUnaryOp(PrefixUnaryOp::Dec, Box::new(expr)),
    Span { start, end, }
  ),
  <start: @L> "++" <expr:AccessOrCallExpression> <end: @R> => Expression::new(
    ExpressionKind::PrefixUnaryOp(PrefixUnaryOp::Inc, Box::new(expr)),
    Span { start, end, }
  ),
  <start: @L> "!" <expr:AccessOrCallExpression> <end: @R> => Expression::new(
    ExpressionKind::PrefixUnaryOp(PrefixUnaryOp::Not, Box::new(expr)),
    Span { start, end, }
  ),
};

AccessOrCallExpression: Expression = {
  Term,
  <start: @L> <left:AccessOrCallExpression> "." <right:Identifier> <end: @R> => Expression::new(
    ExpressionKind::PropertyAccess(Box::new(left), right),
    Span { start, end, },
  ),
  <start: @L> <left:AccessOrCallExpression> "[" <right:Expression> "]" <end: @R> => Expression::new(
    ExpressionKind::ArrayAccess(Box::new(left), Box::new(right)),
    Span { start, end, },
  ),
  <start: @L> <callee:AccessOrCallExpression> "(" <arguments:CommaList<Expression>> ")" <end: @R> => Expression::new(
    ExpressionKind::FunctionCall {
      callee: Box::new(callee),
      arguments,
    },
    Span { start, end, },
  ),
};

Term: Expression = {
  JsBlockExpression,
  IfExpression,
  BlockExpression,
  ListExpression,
  <start: @L> <value:BooleanLiteral> <end: @R> => Expression::new(
    ExpressionKind::Boolean(value),
    Span { start, end, },
  ),
  <start: @L> <value:IntegerLiteral> <end: @R> => Expression::new(
    ExpressionKind::Integer(value),
    Span { start, end, },
  ),
  <start: @L> <value:StringLiteral> <end: @R> => Expression::new(
    ExpressionKind::String(value),
    Span { start, end, },
  ),
  <start: @L> <value:Identifier> <end: @R> => Expression::new(
    ExpressionKind::Identifier(value),
    Span { start, end, },
  ),
  <start: @L> "(" <expr:Expression> ")" <end: @R> => Expression::new(
    ExpressionKind::Parenthesized(Box::new(expr)),
    Span { start, end, },
  ),
};

BooleanLiteral: bool = {
  "true" => true,
  "false" => false,
};

IntegerLiteral: i32 = {
  r"0|[1-9][0-9]*(_[0-9]+)*" => i32::from_str(&str::replace(<>, "_", "")).unwrap(),
};

StringLiteral: String = {
  r#""(\\[rnt\"]|[^\"])*""# => <>[1..(<>.len() - 1)].to_string(),
  r#"'(\\[rnt\']|[^\'])*'"# => <>[1..(<>.len() - 1)].to_string(),
};

Identifier: Identifier = {
  <start: @L> <name:r"[a-zA-Z_][a-zA-Z_0-9]*(-+[a-zA-Z_0-9]+)*"> <end: @R> => {
    Identifier {
      name: name.to_string(),
      span: Span { start, end },
    }
  }
};

BlockExpression: Expression = {
  Block => <>.into()
};

Block: Block = {
  <start: @L> "{" <stmts:Statement*> <return_expr:Expression?> "}" <end: @R> => Block {
    span: Span { start, end, },
    statements: stmts,
    return_expression: return_expr,
  },
};

IfExpression: Expression = {
  <start: @L> "if" <condition:Expression> <body:BlockExpression> <else_:("else" <ElseBody>)?> <end: @R> =>
    Expression::new(
      ExpressionKind::If {
        condition: Box::new(condition),
        body: Box::new(body),
        else_: else_.map(|x| Box::new(x)),
      },
      Span { start, end, },
    ),
};

ElseBody: Expression = {
  IfExpression,
  BlockExpression,
};

ListExpression: Expression = {
  <start: @L> "[" <items:CommaList<Expression>> "]" <end: @R> => Expression::new(
    ExpressionKind::List(items),
    Span { start, end, },
  ),
};

JsBlockExpression: Expression = {
  <start: @L> "#js" <type_specifier:(":" <Type>)?> "{" <exprs:Term+> "}" <end: @R> => Expression::new(
    ExpressionKind::JsBlock(type_specifier.unwrap_or(Type::Void), exprs),
    Span { start, end, },
  ),
};

CommaList<T>: Vec<T> = {
  <mut items:(<T> ",")*> <end:T?> => match end {
    None => items,
    Some(end) => {
      items.push(end);
      items
    }
  }
};

// Skip whitespace and comments
match {
  r"\s*" => { },
  r"//[^\r\n]*[\r\n]*" => { },
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },
  _
}